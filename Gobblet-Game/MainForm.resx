<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema 

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        hAH/2Q==
</value>
  </data>
</root>